1. npm install knex

2. import knex 
	 const knex = require('knex');

3. npm install pg("database u want to connect to)

4. connecting to databse 

	const db = knex({
    client: 'pg',
    connection: {
        host: '127.0.0.1',
        user: 'postgres',
        password: 'pass',
        database: 'facedetection'
    }
})

5. db.select('*').from('users') returns a promise and we get a response

6. db.select('*').from('users').then(data=>{
    console.log(data);
})
 
for accessing something in database

7. for inserting data to databse
	db('users').insert({
        email: email,
        name: name,
        joined: new Date()
    }).then(console.log)

8. db('users')                
    .returning('*')
    .insert({
        email: email,
        name: name,
        joined: new Date()
    })
    .then(user => {
        res.json(user[0])
    })
    
	Utilized by PostgreSQL, MSSQL, and Oracle databases, the returning method 
	specifies which column should be returned by the insert, update and delete methods.

9. Getting the user's info 
	// Profile

app.get('/profile/:id', (req,res)=>{
    const {id} = req.params;
    
    db.select('*').from('users').where({ id}).then(user=>{
        if(user.length){
            res.json(user[0])
        }
        else{
           res.status(400).json("not found")
        }
        
    })
    .catch(err=> res.status(400).json('error getting user'))
  
})

10. Updating the user's profile
	
app.put('/image', (req,res)=>{
    const {id} = req.body;
    db('users').where('id', '=', id)
    .increment('entries', 1)
    .returning('entries')
    .then(entries =>{
        console.log(entries)
    })
})

11. // Register


A database transaction is a single unit of work that consists of one or more operations.

A classical example of a transaction is a bank transfer from one account to another.
A complete transaction must ensure a balance between the sender and receiver accounts.
It means that if the sender account transfers X amount, the receiver receives X amount, no more or no less.

app.post('/register',(req,res)=>{    
    const {email, name , pass} = req.body;

    const hash = bcrypt.hashSync(pass);

       db.transaction(trx =>{
           trx.insert({
               hash: hash,
               email: email
           })
           .into('login')
           .returning('email')
           .then(loginEmail => {
                return trx('users')
                .returning('*')
                .insert({
                    email: loginEmail[0],
                    name: name,
                    joined: new Date()
                })
                .then(user => {
                    res.json(user[0]);
                })
           })
           .then(trx.commit)
           .catch(trx.rollback)
       })
        
    .catch(err => res.status(400).json('Unable to register'));
    
})

12. // Signin

app.post('/signin', (req,res)=>{
    db.select('email','hash').from('login')
    .where('email' , '=' , req.body.email)
    .then(data => {
      const isValid =  bcrypt.compareSync(req.body.pass, data[0].hash);
      console.log(isValid)
      if(isValid)
      {
         return db.select('*').from('users').where('email', '=', req.body.email)
          .then(user=>{
              console.log(user[0])
              res.json(user[0])
          })
          .catch(err => res.json.status(400).json('Unable to get user'))
      }
      else{
        res.status(400).json('Wrong credential')
      }
      
    })
    .catch(err => res.status(400).json('Wrong credential'))
    
})


